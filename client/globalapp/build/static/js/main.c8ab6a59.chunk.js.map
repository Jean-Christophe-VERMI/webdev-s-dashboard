{"version":3,"sources":["components/App/logo.svg","components/App/index.js","reducers/dashbord.js","actions/dashbord.js","reducers/index.js","middleware/logMiddleware.js","store/index.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","logo","alt","href","target","rel","initialState","projects","days","dashbord","state","action","type","combineReducers","logMiddleware","store","next","console","log","getState","enhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","createStore","rootReducer","Boolean","location","hostname","match","rootReactElement","StrictMode","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,yLCyB5BC,G,MArBH,kBAEV,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,oGAGA,uBACEH,UAAU,WACVI,KAAK,IACLC,OAAO,SACPC,IAAI,uBAJN,wB,eCVFC,EAAe,CACnBC,SAAU,GACVC,KAAM,IAcOC,EAXE,WAAwC,IAAvCC,EAAsC,uDAA9BJ,EAAcK,EAAgB,uDAAP,GAC/C,OAAQA,EAAOC,MACb,ICTuB,cDUrB,OAAO,eACFF,GAEP,QACE,OAAOA,IEXEG,cAAgB,CAC7BJ,aCEaK,EANO,SAACC,GAAD,OAAW,SAACC,GAAD,OAAU,SAACL,GAC1CM,QAAQC,IAAIH,EAAMI,YAClBF,QAAQC,IAAI,kCAAmCP,GAC/CK,EAAKL,MCIDS,GAFmBC,OAAOC,sCAAwCC,KAGtEC,YACEV,IAYWC,EANDU,YACZC,EAEAN,GCNkBO,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCNN,IAAMC,EACJ,kBAAC,IAAD,CAAUhB,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAMiB,WAAP,KACE,kBAAC,EAAD,SAOF5B,EAAS6B,SAASC,eAAe,QACvCC,iBAAOJ,EAAkB3B,GD2GnB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.c8ab6a59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst App = () => (\n\n  <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Page d'accueil qui réunit l'ensemble des projets développés.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"#\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Voir les projets\n        </a>\n      </header>\n  </div>\n\n)\n\nexport default App;\n","import { CURRENT_DAY } from '../actions/dashbord.js';\r\n\r\nconst initialState = {\r\n  projects: [],\r\n  days: [],\r\n};\r\n\r\nconst dashbord = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case CURRENT_DAY:\r\n      return {\r\n        ...state,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default dashbord;\r\n","export const CURRENT_DAY = 'CURRENT_DAY';\r\n\r\n\r\nexport const setCurrentDayinState = () => ({\r\n  type: CURRENT_DAY,\r\n});","import { combineReducers } from 'redux';\r\nimport dashbord from './dashbord';\r\n\r\nexport default combineReducers({\r\n  dashbord,\r\n});","const logMiddleware = (store) => (next) => (action) => {\r\n  console.log(store.getState());\r\n  console.log('Je laisse passer cette action: ', action);\r\n  next(action);\r\n};\r\n\r\nexport default logMiddleware;","import { createStore, compose, applyMiddleware } from 'redux';\r\n\r\nimport rootReducer from '../reducers';\r\nimport logMiddleware from '../middleware/logMiddleware';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst enhancers = composeEnhancers(\r\n  applyMiddleware(\r\n    logMiddleware,\r\n    // secondMiddleware,\r\n  ),\r\n);\r\n\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  // preloadedState,\r\n  enhancers,\r\n);\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport App from './components/App';\n\nimport store from './store';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReactElement = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </BrowserRouter>\n  </Provider>\n\n);\n\nconst target = document.getElementById('root');\nrender(rootReactElement, target);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}